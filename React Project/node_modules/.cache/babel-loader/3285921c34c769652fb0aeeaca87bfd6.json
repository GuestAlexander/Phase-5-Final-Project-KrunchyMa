{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (username, password) => dispatch => {\n  return AuthService.register(username, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","username","password","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","logout"],"sources":["/Users/alexguest/Desktop/Phase-5-Final-Project-KrunchyMa-main/React Project/src/actions/auth.js"],"sourcesContent":["import {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const register = (username, password) => (dispatch) => {\n    return AuthService.register(username, password).then(\n        (response) => {\n            dispatch({\n                type: REGISTER_SUCCESS,\n            });\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: response.data.message,\n            });\n\n            return Promise.resolve();\n        },\n        (error) => {\n\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            dispatch({\n                type: REGISTER_FAIL,\n            });\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: message,\n            });\n\n            return Promise.reject();\n        }\n    );\n};\n\nexport const login = (username, password) => (dispatch) => {\n    return AuthService.login(username, password).then(\n        (data) => {\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: {user: data},\n            });\n\n            return Promise.resolve();\n        },\n        (error) => {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            dispatch({\n                type: LOGIN_FAIL,\n            });\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: message,\n            });\n\n            return Promise.reject();\n        }\n    );\n};\n\nexport const logout = () => (dispatch) => {\n    AuthService.logout();\n\n    dispatch({\n        type: LOGOUT,\n    });\n};\n"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,aAFJ,EAGIC,aAHJ,EAIIC,UAJJ,EAKIC,MALJ,EAMIC,WANJ,QAOO,SAPP;AASA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAyBC,QAAD,IAAc;EAC1D,OAAOJ,WAAW,CAACC,QAAZ,CAAqBC,QAArB,EAA+BC,QAA/B,EAAyCE,IAAzC,CACFC,QAAD,IAAc;IACVF,QAAQ,CAAC;MACLG,IAAI,EAAEb;IADD,CAAD,CAAR;IAIAU,QAAQ,CAAC;MACLG,IAAI,EAAER,WADD;MAELS,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;IAFlB,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACC,OAAR,EAAP;EACH,CAZE,EAaFC,KAAD,IAAW;IAEP,MAAMH,OAAO,GACRG,KAAK,CAACP,QAAN,IACGO,KAAK,CAACP,QAAN,CAAeG,IADlB,IAEGI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFxB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALJ;IAOAV,QAAQ,CAAC;MACLG,IAAI,EAAEZ;IADD,CAAD,CAAR;IAIAS,QAAQ,CAAC;MACLG,IAAI,EAAER,WADD;MAELS,OAAO,EAAEE;IAFJ,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACH,CAhCE,CAAP;AAkCH,CAnCM;AAqCP,OAAO,MAAMC,KAAK,GAAG,CAACd,QAAD,EAAWC,QAAX,KAAyBC,QAAD,IAAc;EACvD,OAAOJ,WAAW,CAACgB,KAAZ,CAAkBd,QAAlB,EAA4BC,QAA5B,EAAsCE,IAAtC,CACFI,IAAD,IAAU;IACNL,QAAQ,CAAC;MACLG,IAAI,EAAEX,aADD;MAELY,OAAO,EAAE;QAACS,IAAI,EAAER;MAAP;IAFJ,CAAD,CAAR;IAKA,OAAOE,OAAO,CAACC,OAAR,EAAP;EACH,CARE,EASFC,KAAD,IAAW;IACP,MAAMH,OAAO,GACRG,KAAK,CAACP,QAAN,IACGO,KAAK,CAACP,QAAN,CAAeG,IADlB,IAEGI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFxB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALJ;IAOAV,QAAQ,CAAC;MACLG,IAAI,EAAEV;IADD,CAAD,CAAR;IAIAO,QAAQ,CAAC;MACLG,IAAI,EAAER,WADD;MAELS,OAAO,EAAEE;IAFJ,CAAD,CAAR;IAKA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACH,CA3BE,CAAP;AA6BH,CA9BM;AAgCP,OAAO,MAAMG,MAAM,GAAG,MAAOd,QAAD,IAAc;EACtCJ,WAAW,CAACkB,MAAZ;EAEAd,QAAQ,CAAC;IACLG,IAAI,EAAET;EADD,CAAD,CAAR;AAGH,CANM"},"metadata":{},"sourceType":"module"}